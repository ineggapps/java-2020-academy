■ 자바 테스트

오류인 경우 컴파일 오류인지 런타임 오류 인지와 이유를 간단히 기술하세요

1] 다음 실행 결과는 ?
class Test {
    public int a=3;
    public void print() { 
        a+=5; 
        System.out.print("f ");
    }
}

class Ex extends Test{
    public int a=8;
    public void print() { 
        this.a+=5; 
        System.out.print("b "); 
    }
}

public class Sam {
     public static void main(String[] args) {
        Test ob = new Ex();
	ob.print();
	System.out.print(ob.a);
    }
}

답안: b 3
Ex가 Test를 상속하였다.
따라서 Ex가 좀 더 큰 개념이므로 Test참조변수에 Ex객체의 주소를 담을 수 있음.
그러나 Test참조변수로 메서드를 호출한다고 하더라도 오버라이딩된 메서드는 실 객체의 메서드를 실행한다.
그러므로 Ex 클래스의 print()메서드를 실행한 결괏값인 13b가 출력이 된다.
변수의 경우에는 참조변수형의 클래스에 있는 변수를 참조한다.

2] 다음에서
class Aclass{}
class Bclass extends Aclass {}
class Cclass extends Aclass {}
    :
Aclass p0= new Aclass();
Bclass p1= new Bclass();
Cclass p2= new Cclass();
Aclass p3= new Bclass();
Aclass p4= new Cclass();

잘못 작성된 것을 모두 고루면 ?

  가. p0=p1;
  나. p1=p2;
  다. p2=p4;
  라. p2=(Cclass)p1;
  마. p1=(Bclass)p3;
  바. p1=(Bclass)p0;
  사. p2=(Cclass)p4;

답안: 나, 다★, 라, 바(런타임 오류)
(다)의 경우에는 p2=(C)p4; 로 지정해줘야 한다. p4가 AClass의 참조변수이기 때문이다.
(라)의 경우에도 불가능하다. 서로 상속관계가 아님
(바)의 경우에는 실행할 때 오류가 발생한다. 다운캐스팅은 본래 Cclass의 객체만 가능하다. 

3] 다음에서
 class One {
  void test() { }
 }

 class Two extends One {
      [                ]
 }
 
 [         ] 에 추가 할 수 있는 것을 모두 고르면 ?
 
   가. int test() { /*more code here */ }
   나. void test() { /*more code here */ }
   다. public void test() { /* more code here */ }
   라. private void test() { /*more code here*/ }
   마. protected void test() { /*more code here */ }

답안:  나, 다, 마
(가) 오버라이딩할 수 없다. 본래의 반환형은 void type이다.
오답피하기) 오버로딩은 매개변수의 개수나 타입으로만 판별하므로 반환 타입이 다르면서 매개변수의 개수나 타입이 같은 메서드가 동시에 2개가 존재할 수 없다.
*오버라이딩은 상속 받은 super class의 메서드와 접근제한자가 같거나 더 개방적이어야 한다.

4] 다음 클래스에서 몇 번째 라인을 제거하면 컴파일 오류가 없어지며, 컴파일 오류가 없어진 후 결과는 ?

1:   class Test { }
2:   public class Ex extends Test {
3:       public static void main(String[] args) {
4:            Test t1 = new Test();
5:            Ex e1 = new Ex();
6:            Ex e2 = (Ex)t1;
7:            Object o1 = (Object)t1;
8:            String s1 = (String)t1;
9:            Test t2 = (Test)e1;
10:          System.out.println(t2);
11:     }
12: }

답안: 8번라인 제거하면 컴파일 오류가 발생한다. 이후 6번 라인에 의해 런타임 오류가 발생한다.
Test클래스는 String클래스와 서로 상속 관계가 아니다.
본래 t1은 Test클래스의 객체이므로 Ex로 다운캐스팅을 할 수 없다.

5] SubTest 클래스 객체를 『SubTest ob=new SubTest();』처럼 생성될 때 SuperTest 의 인스턴스 변수에 10을 대입하기 위해 다음 프로그램의 [  ] 에 들어갈 코딩 방법 두가지는 ? 
class SuperTest {
    private int a;
    protected SuperTest(int a) {
        this.a=a;
    }
  }
  class SubTest extends SuperTest {
      public SubTest(int a) { super(a); }
      public SubTest() { [               ] }
  }

답안: 
1) super(10); 
2) this(10);

6] 다음 실행 결과는 ?
class X {
    X() { System.out.print(1);  }
    X(int x) { this();  System.out.print(2); }
}

public class Y extends X {
    Y() { super(6);  System.out.print(3); }
    Y(int y) { this();  System.out.println(4); }
    public static void main(String[] args) {
        new Y(5);
    }
}

답안: 1234

<< 7~8 번 문제 클래스 >>
class Test{
    int a=10;
}
class Ex extends Test {
    int b=20;
}


7] Object ob=new Ex(); 에서 가능한 모든것을 고르면 ?
가. int x=ob.a;
나. int x=(Test)ob.a;
다. int x=((Test)ob).a;
라. int x=((Ex)ob).a;
마. int x=((Test)ob).b;
바. int x=((Ex)ob).b;

답안: 다, 라, 바
ob는 Object의 참조변수이다. 그런데 Ex()객체가 생성되고 업캐스팅되었다.

8] 다음중 가능한 모든것을 고르면 ?
가. Test ob=new Ex();
나. Ex ob=new Test();
다. Object ob=new Ex();
라. Object ob=new Test();
마. Ex ob=new Object();

답안: 가, 다, 라

9] 15번 라인을 실행 할 경우 garbage collector은 몇 번 객체의 메모리를 해제하는가 ? 
1. class Test {
2.    Long a=1200L;//// Test가 메모리 해제되면서 Long도 메모리가 해제된다.
3.    public void print() {
4.        System.out.println("슈퍼 클래스...");
5.    }
6. }

7. public class Ex extends Test {
8.    public void print() {
9.        System.out.println("서브 클래스...");
10.    }
11.    public static void main(String[] args) {
12.        Ex e1 = new Ex();
13.        Ex e2 = new Ex();
14.        Ex e3 = new Ex();
15.	    e3=e1; e1=e2; e2=null; e3=e1;
16.    }
17. }

답: 4번★
Test클래스가 1개가 사라지는 동안 Test클래스객체와 Long클래스객체 두 개가 사라져야 한다.
2X2이므로 4가 된다.

10] 다음은 Object 클래스의 equals() 메소드를 override 할 소스이다. 잘못된 부분을 수정하면 ?
public class Test {
    private String name;
    public Test(String name) {this.name=name;}
    public boolean equals(Test p) {
        return name.equals(p.name);
    }
}

답: 
public boolean equals(Object p){
    return name.equals(((Test)p).name);
}
* 오버라이딩의 경우에는 매개변수의 개수와 타입 순서가 모두 일치해야 한다.
* 접근제한자는 같거나 더 개방적이어야 한다.
* 예외처리는 줄일 수는 있어도 더 늘릴 수는 없다. 

11] 다음 실행 결과는 ?
1. class Test {
2.     protected static int add(int a, int b) {return a+b;}
3. }

4. class Ex extends Test {
5.     protected static int add(int a, int b) {
6.         int x = super.add(10, 5);
7.         return x;
8.    }
9. }

10. public class Sam {
11.     public static void main(String[] args) {
12.        Ex.add(10, 5);
13.    }
14. }

  가. 15
  나. 런 타임 오류
  다. 2번 라인으로 인하여 컴파일 오류 발생
  라. 6번 라인으로 인하여 컴파일 오류 발생
  마. 12번 라인으로 인하여 컴파일 오류 발생

답안: 라★
static메서드는 클래스를 생성하지 않고도 호출할 수 있다.
this나 super키워드는 static에서 사용할 수 없다.
6. int x = Test.add(10,5);

12] 다음 실행 결과는 ? 단, 프로그램 실행에 오류 발생한다면 수정하라.
class Aclass {
    public int a;
    protected Aclass(int a) { this.a=a; }
}

class Bclass extends Aclass {
    private Bclass(int a) { super(a); }
    public static void main(String[] args) {
        Bclass ob=new Bclass(420);
	System.out.print(ob.a);
    }
}

답안:420 (오류 없이 실행됨)


13] 다음 실행 결과는 ?
class A{
   int x;
   public A(int x) {x=10;}
}
class B extends A {
    public void write() {System.out.println(x);}
}
public class C {
    public static void main(String[] args)  {
       B ob=new B();
       ob.write();
    }
}

답안: 컴파일 오류!
A클래스의 생성자는 매개변수를 받는 생성자만 존재한다.
B클래스에는 명시적으로 생성자가 선언되지 않았으므로 매개변수가 없는 생성자가 컴파일할 때 삽입될 것이다.
따라서 B클래스의 객체를 생성할 때 A클래스의 생성자를 호출하는 super() 메서드가 실행될 것이지만 A클래스의 생성자에는 매개변수가 없는 생성자가 없다.
그러므로 오류가 발생한다.


14] 다음에서
class Test {
   private int x;//10
   public void setX( int x ) { this.x = x;}
   public int getX(){ return x; }
}

class Ex{
   private Test y;
   public void setY( Test y ) { this.y =y; }
   public Test getY() { return y; }
}

public class Sample{
   public static void main(String[] args){
     Ex o = new Ex();
     Test i = new Test();
     int n = 10;
     i.setX( n );
     o.setY( i );//Test 객체를 삽입함
     [                 ]
     System.out.println( o.getY().getX() );
   }
}

[      ]에 어떤 코드가 추가되었을 때 100이라는 출력 결과가 나오는지 모두 고르면 ?

  가. n = 100;
  나. i.setX(100);
  다. o.getY().setX(100);
  라. i = new Test(); i.setX(100);
  마. o.setY(i); i=new Test(); i.setX(100);
  바. i = new Test(); i.setX(100); o.setY(i);

답안: 나, 다, 라

15] 다음 실행 결과는 ?
 class A {
  protected void write() {System.out.println("a"); }
 }
 class B extends A {
   public void write() {System.out.println("b"); }
 }
 public class C {
     public static void main(String[] args) {
        B ob=new B();
        ob.write();
     }
 }

답안: b
* 오버라이딩된 메서드
* 오버라이딩 시 super class와 접근제한자가 같거나 더 개방적이면 된다.

16] 다음 실행 결과는 ?
public class Test {
  public static void main(String[] args) {
      new Test().go("a", 1);
      new Test().go("c", "d", 2);
  }

  public void go(String... s, int x) {
      System.out.println(s[s.length-1]+" ");
  }
}

답안: 컴파일 오류
부정인수 ...은 맨 뒤에서 단 한 번만 매개변수로 받을 수 있다. 

17] 다음과 같은 코드가 있다.
10. class One {
11.  void foo() { }
12. }
13.  class Two extends One {
14.   //insert method here
15. }
 
 다음 중 어떤 메서드를 14번 라인에 삽입했을 때 Two 클래스를 올바르게 완성할 수 있나?
 (세 개를 고르십시오.)
 
가. int foo() { /*more code here */ }
나. void foo() { /*more code here */ }
다. public void foo() { /* more code here */ }
라. private void foo() { /*more code here*/ }
마. protected void foo() { /*more code here */ }
 
 답안: 나, 다, 마

18] 다음 실행  결과는 ?
class Test {
	int a=20;
	public String toString() {
	    return a+"살";
	}
        public static void main(String[] args) {
              Object ob=new Test();
	      System.out.println(ob);
        }
}

답안: 20살
Test클래스는 Object에 있는 toString()메서드를 오버라이딩하였다.
그런데 메서드는 오버라이딩을 하면 어떤 참조변수로 가리키더라도 부모에서 선언된 메서드의 내용은 숨는다.
따라서 20살이라는 결과가 출력된다.


19] 다음의 실행 결과는 ?
class Test extends String {
	String s="서울";

        public static void main(String[] args) {
	      Test ob=new Test();
	      System.out.println(ob.s.length());
        }
}

답안: 컴파일 오류 (extends String)
String은 상속할 수 없는 final class로 선언되었다.


20] 다음 실행 결과는 ?
class Test {
   private int x;
   public final void set( int x ) { this.x = x+10;}
   public int get(){ return x; }
}
class Ex extends Test {
   public void set( int x ) { this.x =x; }
}

public class Sample{
   public static void main(String[] args){
     Ex o = new Ex();
     System.out.println( o.get() );
   }
}

답안:컴파일 오류가 발생한다.
Test클래스의 private int x로 선언된 변수는 Ex클래스가 아무리 상속받더라도 건드릴 수 없다.
심지어 Ex클래스에도 int x로 선언된 변수는 없다. 심지어 set메서드는 final메서드이므로 오버라이딩할 수 없다.
그런데 Ex클래스에서 public void set(int x) 메서드에서 this.x=x; 로 선언하였다.
이곳에서 컴파일 오류가 발생한다.
