■ 자바 테스트

오류인 경우 컴파일 오류인지 런타임 오류 인지 기술하세요

1] 다음 실행 결과는 ?
int value=0;
boolean setting = true;
float f=0;
if (value || (setting && f == 0)) { System.out.println("1"); }
if (value == 1 & f==0) { System.out.println("2"); }

답안: 컴파일오류
if (value || (setting && f == 0)) { System.out.println("1"); }
★논리연산에서는 boolean형만 올 수 있다.

2] 다음 실행 결과는 ?
int x =5;
boolean b1 = true;
boolean b2 = false;

if((x==4) && !b2) 
  System.out.print("1 ");
System.out.print("2 ");
if ((b2 = true) && b1)
  System.out.print("3 ");

답안:2 3
if문의 {} 블록이 선언되지 않으면 if문의 범위는 if문의 다음 줄까지이다.
따라서 if((x==4) && !b2) 에서 5==4 에서 조건이 만족하지 않으므로 논리곱 뒤의 항의 연산은 수행되지 않고 if문 아랫줄도 실행되지 않는다.
2가 출력이 된다.
b2=true라는연산을 먼저 수행하였고 true && b1을 수행하면 true && true이다. 
따라서 참이 되므로 3을 출력한다.


3] 다음의 실행 결과는 ?
int i = 1;
int j = i++;
if((i == ++j) | (i++ == j)) {
    i += j;
}
System.out.println("i = " + i);

답안:i=5
i가 1로 선언되었지만 j를 선언하는 과정에서 i++를 수행하였다.
j값을 초기화하는 과정 이후 i는 1 증가한 값인 2가 된다.
이 상태에서 조건문을 실행하면 (i == ++j)는 true이다. 
앞 항의 조건문 비교가 끝나고 뒤의 항의 조건문 비교 시에는 i는 2이고 j도 2가 된다.
뒤의 항의 조건문 비교에서 (i++ == j) 는 (2==2)를 의미하므로 true가 된다.
비트논리합 연산을 수행하면 true가 된다.
조건식 비교가 모두 끝나면 뒤의항 i++ 때문에 i는 3이 된다.
i+=j 연산을 수행하면 i=3+2를 의미하므로 i=5가 된다.

4] 다음의 실행 결과는 ?
int i = 0, j = 1;
if((i++ == 0) || (j++ == 2)) {
    i = 42;
}
System.out.println("결과:" + i + j);

답안:421
논리합 ||는 앞 항의 조건이 만족하면 뒤의 항의 조건연산을 비교하지 않는다.
따라서 (i++ == 0)는 조건식을 비교하지만 여기서 충족하고 i를 1증가시킴과 동시에  (j++ == 2)는 건너뛴다.
i는 1을 증가시켜 1이라는 값이 되었지만 i=42; 명령줄에서 42가 된다.
따라서 j는 증가하지 않은 채의 상탯값인 1인 채로 프로그램이 종료된다.

5] 다음 실행 결과는 ?
public class Test {
  public static void main(String [] args){
    int a=2;
    switch(a){
      case 1:
        System.out.println("*");
      case 2:
        System.out.println("**");
      case default:
        System.out.println("#");
      case 3:
        System.out.println("***");
    }
  }
}

답안:컴파일 오류
case 리터럴값 혹은 문자열이 와야 한다.


6] 다음 실행 결과는 ?
int a=0, s=0;
while(a++ <= 9) {
    s+=a;
}
System.out.println("a:"+a+", s:"+s);

답안:a:11, s:55

7] 다음 실행 결과는 ?
int x = 0;
int y = 10;
while(x++ < 5) {
   y--;
   ++x;
}
System.out.print(x + "," + y);

답안: 7,7


8] 다음 실행 결과는 ?
int x=12;
while (x < 10) {
    x--;
}
System.out.print(x);

답안:12
while 조건문을 충족하지 않으므로 반복문 내의 어떠한 명령줄도 수행하지 않고 결괏값이 출력된다.


9] 다음의 코드에서 37 라인의 실행 회수는 ?
35. int x = 10;
36. while(x <= 10) {
37.  x--;
38. }

가. 10번
나. 한 번도 실행되지 않음
다. 한 번에서 9번까지
라. 10번 이상

답안: 라
x가 10으로 시작하면 10<=10으로 while문의 조건식에 만족한다.
x감소 연산을 수행하면 계속 x<=10의 조건식에 만족하게 된다.
따라서 최소 10번 이상 실행된다.

10] 다음 실행 결과는 ?
int a;
a='0'+17;
System.out.printf("%1$d %1$c\n", a);//오류 없이 출력됨

답안:65 A 

'0'은 정수형으로 48이라는 값을 의미한다.
48+17을 수행하면 65이다.

%1$d는 인수 중 첫 번째 요소를 정수형으로 표시하라는 의미이고
%1$c는 인수 중 첫 번째 요소를 char형으로 표시하라는 의미이다.

11] 다음의 실행 결과는 ?
String s="ko", str;
switch(s) {
case "en" : str = "영어"; break;
case "ko" : str = "한국어"; break;
case "fr" : str = "프랑스어"; break;
}
System.out.println(str);

답: 컴파일 오류
컴파일 시 str변수가 조건이 충족하지 않으면 switch문을 지나치지 않아 변수가 초기화되지 않는다고 인식할 것이다.
switch문에서 default: 구문을 추가하는 등 str의 변수를 미리 초기화하면 오류가 발생하지 않는다. 


12] 다음의 결과는 ?
int a=13;
String s;
if(a&1==1)
	s="홀수";
else
	s="짝수";
System.out.println(s);	

답: 컴파일 오류

연산자의 우선순위 때문에 오류가 발생하여 1==1 먼저 수행하게 된다.
그런데 a는 int형 타입이므로 조건식에서 참/거짓을 판단할 수가 없어 오류가 발생한다.
이 경우에는 (a&1)==1 로 괄호를 씌워 연산자의 우선순위를 지정해 주어야 한다.

13] 다음 실행 결과는 ?
int a=10, b=10;
int c;
c=a++>10 ? ++b : b++;
System.out.println(a+","+b+","+c);

답:11,11,10
c=a++>10? 에서 10>10 조건이 만족하지 않았으므로 b++연산을 수행한다.
c에 먼저 b의 기존 값인 10이 대입된 이후에 b=b+1의 연산을 수행한다.
그러므로 출력되는 값은 a는 11, b도 11, c는 10이 된다.

14] 다음 결과는 ?
byte a=67;
char b=(char)a;
System.out.println(b);

답:C
a의 값은 byte이므로 char형인 b와는 타입이 다르지만 캐스팅하여 대입을 수행하였으므로 오류가 없다.

15] 다음 결과는 ?
short a=12, b=6, c;
c=a|b;
System.out.println(c);

답안: 컴파일 오류
a|b 연산은 기본적으로 int형으로 변환되어 행되므로 결괏값 역시 int형이다.
따라서 (short)(a|b)로 변환해주는 것이 바람직하다.

16] 다음 결과는 ?
float a='C';
System.out.println(a);

답안:67.0
literal은 변환되어 저장될 수 있다.
char z='C';
float a=z; 는 불가능하다는 의미

======17번~25번: 과제발표 예정
17] 다음 결과는 ?
int a=65;
System.out.printf("%c", a);

답안:A

18] 다음 결과는 ?
char a='A';
System.out.printf("%d", a);

답안:65

19] 다음 결과는 ?
System.out.println(('A'+10) + " : " + ('A'+'0'));

답안: 75 : 113
'A'는 char형이지만 int형으로 변환하면 65이다.
'0'은 char형이지만 int형으로 변환하면 48
'A'+10은 75가 되며,
'A'+'0'=65+48=113이 된다.

20] 다음 실행 결과는 ?
String s = '0' + 9 + "Hello";
System.out.println(s);

답안:57Hello
'0'은 char형이지만 int형으로 변환하면 48이다.
'0'과 9를 연산하면 57이 된다.
57+"Hello"를 연산하면 뒤쪽이 문자열이므로 문자열로 결합이 된다.

21] 다음중 올바른것을 모두 고르면 ?
가. float foo = 0;
나. float foo = 1.0;
다. float foo = 42e2;
라. float foo = 1.2e-04f;
마. float foo = 3.03d;
바. float foo = 0123;
사. float foo = 'X';

답안:가,라,바,사
'나,마'는 double형이다.
'다'는 지수이므로 double형이다.
바: 8진수


22] 다음의 실행 결과는 ?
char a=65;
a=a+2;
System.out.println(a);

답안: 컴파일 오류
자바의 연산은 기본적으로 int형으로 수행한다.
a+2의 결괏값은 char형이 아니라 int형으로 반환된다.
따라서 (char)a+2로 고쳐주어야 맞는 표기이다.

23] 다음의 실행 결과는 ?
int a=0b102;
char b='A';
b+=a;
System.out.println(b);

답안: 컴파일 오류
0b는 2진수 표기법이다.
2진수는 0과 1로 이루어진 수이다.
cf)증감연산자를 사용하면 형변환 없이 연산을 수행한다.

24] 다음의 실행 결과는 ?
char a=65;
a+=2;
System.out.println(++a);

답안:D
증감연산자는 형변환 없이 연산을 수행하므로 가능하다.
a+=2에서 C가 되었고
출력하는 곳에서 전위 증감연산자가 나왔으므로 결괏값은 D가 된다.

25] 다음의 실행 결과는 ?
float a=5.2f;
char b='A';
b+=a;
System.out.println(b);

답안:F

증감연산자에서는 형변환이 없이 알아서 연산이 수행된다.
b에 5.2만큼을 더한 수는 65+5.2=70.2이다.
그런데 char은 소숫점을 저장할 수 없으므로 70이 된다.
따라서 출력되는 결괏값은 F가 된다.

26] 다음중 올바른것을 모두 고르면 ?
  가. String name# = "자바";
  나. int $123=24;
  다. double _height = 123.5;
  라. double ~temp = 37.5;
  마. int 총점 = 0;
  사. int a123b = 0;
  아. float a=0.0;

답안:나,다,마,사

가: #은 변수명으로 사용할 수 없다.
라. ~은 변수명으로 사용할 수 없다.
아: 0.0은 double형 literal이므로 대입할 수 없다.


27] 다음의 실행 결과는 ?
double a=14.0%4.5;
System.out.println(a);

답안:0.5
나머지 연산 수행


28] 다음의 실행 결과는 ?
String s = "Hello" + 9 + 'A';
System.out.println(s);

답안:Hello9A
"Hello"라는 문자열과의 연산은 항상 결괏값이 문자열이다.
"Hello"+9는 "Hello9"가 된다.
"Hello9"+ 'A'도 마찬가지로 문자열과의 연산이 진행되므로 "Hello9A"가 된다.

29] 다음의 실행 결과는 ?
double a=32;
a<<=3;
System.out.println(a);

답안: 컴파일 오류
IEEE754 부동소숫점 규격으로 설계된 float, double형에서는 시프트연산을 수행할 수 없다.

30] 다음의 실행 결과는 ?
int a;
System.out.println("a:"+a);

답안: 컴파일 오류
변수는 반드시 초기화된 다음에 참조하여야 한다.
cf) 배열은 참조자료형으로서 객체이고 정수형 배열의 경우에는 자동으로 0으로 초기화된다.

31] 다음의 실행 결과는 ?
int a=32;
a>>=2;
System.out.println(a);

답안:8
a>>=2의 의미는 오른쪽으로 2비트 이동하라는 시프트연산이다.
a가 32이므로 2^-2를 곱하면 8이 된다.

32] 다음의 실행 결과는 ?
System.out.printf("%.0f\n", 123.536);

답안: 124
%.0f는 소숫점 0번째 자리까지만 표기하라는 의미이다.
0번째 자리까지만 표기하기 위한 정수로 출력되기 위해서 소숫점 첫 째 자리에서 반올림한다.

33] 자바의 기본 자료 형(primitive Type) 8가지와 각 자료형의 byte 수를 쓰시오.

답안:

boolean(1byte)
char(2byte)

정수형
byte(1byte)
char(2byte)
int(4byte)
long(8byte)

실수형
float(4byte)
double(8byte)