■ 자바 테스트 (연산자)

오류인 경우 컴파일 오류인지 런타임 오류 인지와 이유를 간단히 기술하세요

1] 다음의 실행 결과는 ?
int a;
System.out.println("a:"+a);

답안:
컴파일 오류가 발생한다.
∵ a라는 변수가 선언되었지만, 초기화되지 않았음.

2] 다음의 실행 결과는 ?
short a=10, b=5, c;
c=a+b;
System.out.println("합 : "+c);

답안:
컴파일 오류가 발생한다.
∵기본적인 숫자의 연산은 int형이다.
a+b의 결괏값 형태는 int형이므로 short형 변수에 저장 시 오류가 발생한다.
따라서 (int)(a+b)로 고쳐주어야 올바르게 작동한다.

3] 다음의 실행결과는 ?
float a=10.5, b=20.2, c;
c=a+b;
System.out.printf("%.2f", c);

답안:★오류 발생
10.5와 20.2는 double형 실수이므로 float형변환이 필요하다.
각각 10.5f, 20.2f로 초기화하면 오류가 발생하지 않는다.

4] 다음의 실행 결과는 ?
float a=14.0f%4.5f;
System.out.println(a);

답안:
0.5?!
JAVA에서는 float형도 나머지 연산(%)을 수행할 수 있다.

5] 다음의 실행 결과는 ?
String s = "Hello" + 9 + 1;
System.out.println(s);

답안:Hello91
첫 번째로 "Hello" + 9 연산이 수행되어 "Hello9"가 되고
두 번째로 "Hello9" + 1 연산이 수행되어 "Hello91"이 된다. 
문자열+다른자료형은 문자열로 결합된다.

6] 다음의 실행 결과는 ?
int a = 12 & 6;
System.out.println(a);

답안:4
2진수 연산 1100&0110=0100

7] 다음의 실행 결과는 ?
int a = 12 ^ 6;
System.out.println(a);

답안:10
2진수 연산 1100^0110=1010

8] 다음의 실행 결과는 ?
int a = 32 >> 3;
System.out.println(a);

답안:4
100000(32)에서 3비트 우측으로 시프트연산한 결과는
000100(4)와 같다.
또는 32*2^-3의 연산과 같다.


9] 결과가 같은 것을 모두 고르면 ?
가. 3 / 2
나. 3 < 2
다. 3 * 4
라. 3 << 2
마. 3 * 22
바. 3 <<< 2

답안: 다, 라
가. 1
나. false
다. 12
라. 12 (3*2^2)
마. 66
바. <<<연산자는 없음.

10] 다음의 실행 결과는 ?
boolean a = false;
boolean b = false;
boolean c = ((a = true) | (b = true));
System.out.println(a + "," + b + "," + c);

답안:
true,true,true
(a=true)에서 a 변수의 값은 true가 대입된다
| 비트연산을 수행해야 하므로 우변도 계산한다.
(b=true)에서 b 변수의 값은 true가 대입된다.
좌변과 우변을 계산한 결과는 true이고 이것이 c의 값이다.

11] 다음의 실행 결과는 ?
char c1, c2;
c1='A';
c2=c1>='A'&&c1<='Z'?c1+32:c1;
System.out.println(c2);

답안:V★오류 발생

c1+32의 값은 int가 나온다.
int형 변수를 별도로 char로 캐스팅하는 작업이 필요하다.
(char)(c1+32)

12] 다음 실행 결과는 ?
String s = 1 + 9 + "Hello";
System.out.println(s);

답안:10Hello
첫 번째로 1+9의 연산을 수행한다. 결괏값은 10이다.
두 번째로 10+Hello를 수행한다. 결괏값은 10Hello이다.

13] 다음 실행 결과는 ?
int a=20;
boolean b=false, c;
c= a>=10 && b;
System.out.println(c);

답안:false
a>=10 의 조건은 true이다.
b의 조건은 false이다.
따라서 c의 결괏값은 false이고 false가 출력된다.

14] 다음 실행 결과는 ?
int a=20;
boolean b=false, c;
c= a>=10 || b;
System.out.println(c);

답안:true
a>=10에서 조건이 이미 충족하므로 c는 true를 출력한다.


15] 다음 실행 결과는 ?
int a=20;
boolean b=false, c;
c= a!=10 || b;
System.out.println(c);

답안: true
a!=10에서 조건이 이미 충족하므로 답은 true를 출력한다.

16] 다음 실행 결과는 ?
int a=10, b=10;
boolean c;
c=++a>10 && b++>10;
System.out.println(a+","+b+","+c);

답안: 11,11,false
++a>10에서 a는 11이 되므로 조건은 충족한다.
b++>10에서 b는 아직 10이므로 조건이 충족하지 않는다.
위의 논리식을 연산하면 c의 결괏값은 false가 된다.
b가 조건식을 비교할 때는 10이지만 명령어가 끝난 다음에는 값을 증가시켜야 하므로 출력되는 결괏값은 11이다.

17] 다음 실행 결과는 ?
int a=10, b=10;
boolean c;
c=a++>10 && ++b>10;
System.out.println(a+","+b+","+c);

답안:11,10,false
a++>10의 결괏값은 false이다.
++b>10의 결괏값은 true이다.
따라서 c의 결괏값은 false를 반환한다.
하지만 &&연산자로 계산할 때 앞의 조건식이 false이면 뒤에 어떠한 결괏값이 오든 최종적인 결괏값은 false이므로 연산을 수행하지 않는다.
그러므로 b의 결괏값은 증가하지 않고 그대로 10의 결과를 출력한다.

18] 다음 실행 결과는 ?
int a=10, b=10;
int c;
c=a++>10 ? ++b : b++;
System.out.println(a+","+b+","+c);

답안:11,11,10
삼항연산식 조건에서 a++>10은 false를 반환한다.
그러므로 거짓일 때 대입하는 b++이 c의 결괏값이다.

19] 다음 실행 결과는 ?
int a=10, b=10;
boolean c;
c=a++>10 || ++b>10;
System.out.println(a+","+b+","+c);

답안:11,11,true
a++>10에서 조건을 만족하지 않는다. 
하지만 ++b>10에서 조건을 만족하므로 c의 결괏값은 true가 된다.


20] 다음 실행 결과는 ?
int a=10, b=10;
boolean c;
c=++a>10 || ++b>10;
System.out.println(a+","+b+","+c);

답안:11,10,true
++a>10에서 조건식을 이미 만족하므로 우변의 조건식은 계산하지 않는다.

21] 다음 결과는 ?
char c, d;
c='A';
c+=1;
System.out.println(c);

답안:B (밑 c+1 연산 구문을 삭제했다고 가정할 경우)
배정연산자에서는 별도로 형변환을 수행하지 않는다.
따라서 'A'의 다음 문잣값인 'B'가 출력된다.

c='A';
c++;
System.out.println(c);

답안:B (밑 c+1 연산 구문을 삭제했다고 가정할 경우)
증감연산자에서는 별도로 형변환을 수행하지 않는다.
따라서 'A'의 다음 문잣값인 'B'가 출력된다.

c='A';
c=c+1;
System.out.println(c);

답안: 오류 발생
c는 char형 변수인데 연산을 수행하였다.
c+1의 연산을 하면 65+1이 되여 66이 된다.
하지만 이 결괏값은 int형이므로 char형에 저장하기 위해서는 캐스팅이 필요하다.

22] 다음 결과는 ?
short a=12, b=6, c;
c=a&b;
System.out.println(c);

답안:오류 발생?!
기본적인 연산의 단위는 int형이므로 a&b의 결괏값은 int이다. (int & int => int)
short에 저장하기 위해서는 캐스팅이 필요하다.

float a=12, b=6, c;
c=a&b;
System.out.println(c);

답안: V★ 오류 발생  
비트단위 연산 중 &는 byte, short, char, int, boolean 형만 가능하다.
실수형은 연산할 수 없다는 것에 유의한다.

23] 다음의 실행 결과는 ?
float a=5.2f;
char b='A';
b+=a;
System.out.println(b);

답안:F
증감연산자에서는 별도로 형변환이 수행되지 않는다.
따라서 연산을 수행하면 65+5.2=70.2가 되지만, char형 변수에 맞게 70이라는 결괏값이 저장된다.
70에 대응하는 알파벳인 F가 출력된다.

24] 다음 실행 결과는 ?
String s = '0' + 9 + "Hello";
System.out.println(s);

답안:57Hello
'0'은 char형 리터럴이다. 이것을 int형으로 변환하면 48이다.
48+9+"Hello"의 연산을 수행한다.

25] 다음의 실행 결과는 ?
int a=0b101;
char b='A';
b+=a;
System.out.println(b);

답안:F
a=5를 의미한다.
b+=a 에서 b는 5번째 뒤의 알파벳인 F값이 저장된다.

26] 다음의 실행 결과는 ? 
System.out.println(1_0+30+'0');

답안:88
10+30+48
1_0=10을 의미한다.
'0'은 char형 리터럴이므로 int형으로는 48을 의미한다.